Please act as a professional verilog designer.

Implement a multi-bit MUX-based synchronizer, data_in will remain constant during the period when data_en is high, and data_en is high for at least 3 clk_b clock cycles. When the value of data_en is high, data can be synchronized. The data change frequency of data_in is very low. The change interval between two adjacent data is at least 10 clk_b clock cycles.
The clock clk_a is responsible for: input data_in is refer to clock a. enable signal data_en is refer to clock a.
The clock clk_b is responsible for the enable signal data_en delays two cycles, that is, two D flip-flops. This is done with reference to clock b. And the data is finally output dataout, and the output refers to clock b.

Module name:  
    synchronizer  

Input ports:
	clk_a: Clock signal A used for synchronous operations.
	clk_b: Clock signal B used for synchronous operations.
	arstn: Active-low reset signal A. Defined as 0 for reset and 1 for reset signal inactive.
	brstn: Active-low reset signal B. Defined as 0 for reset and 1 for reset signal inactive.
	data_in: Input data signal of size 4 bits.
	data_en: Input enable signal that controls the selection operation.

Output ports:
    dataout: Output data signal of size 4 bits.

